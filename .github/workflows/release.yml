name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Matches tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for versioning
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Calculate Version
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/workflows/version.sh"
          . "${GITHUB_WORKSPACE}/.github/workflows/version.sh"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building version: $VERSION"
      
      - name: Build Extensions
        run: |
          node build.js --production
      
      - name: Create Extension Packages
        run: |
          # Chrome Extension
          cd chrome
          zip -r ../currency-converter-chrome-${{ env.VERSION }}.zip . -x "*.git*"
          cd ..
          
          # Firefox Extension  
          cd firefox
          zip -r ../currency-converter-firefox-${{ env.VERSION }}.zip . -x "*.git*"
          cd ..
      
      - name: Upload Chrome Extension
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: currency-converter-chrome-${{ env.VERSION }}.zip
      
      - name: Upload Firefox Extension
        uses: actions/upload-artifact@v4
        with:
          name: firefox-extension
          path: currency-converter-firefox-${{ env.VERSION }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Calculate Version
        run: |
          chmod +x "${GITHUB_WORKSPACE}/.github/workflows/version.sh"
          . "${GITHUB_WORKSPACE}/.github/workflows/version.sh"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Currency Converter v${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            ./chrome-extension/currency-converter-chrome-${{ env.VERSION }}.zip
            ./firefox-extension/currency-converter-firefox-${{ env.VERSION }}.zip
          body: |
            ## Currency Converter v${{ env.VERSION }}
            
            ### Downloads
            - **Chrome Extension**: `currency-converter-chrome-${{ env.VERSION }}.zip`
            - **Firefox Extension**: `currency-converter-firefox-${{ env.VERSION }}.zip`
            
            ### Installation
            
            #### Chrome
            1. Download the Chrome extension zip
            2. Navigate to `chrome://extensions/`
            3. Enable "Developer mode"
            4. Click "Load unpacked" and select the extracted folder
            
            #### Firefox
            1. Download the Firefox extension zip
            2. Navigate to `about:debugging`
            3. Click "This Firefox"
            4. Click "Load Temporary Add-on" and select any file from the extracted folder
            
            ### What's New
            Please see the [commit history](https://github.com/${{ github.repository }}/commits/${{ github.ref }}) for changes.
      

  deploy-website:
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Build project
        run: |
          node build.js --production
      
      - name: Deploy to Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
          SERVER_DEPLOY_PATH: ${{ secrets.SERVER_DEPLOY_PATH }}
          # Email secrets
          CONTACT_EMAIL_TO: ${{ secrets.CONTACT_EMAIL_TO }}
          GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
          GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
          # reCAPTCHA secrets
          RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
          RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          # GTM
          GTM_CONTAINER_ID: ${{ secrets.GTM_CONTAINER_ID }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SERVER_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts

          # Create deployment directory if it doesn't exist
          ssh $SERVER_USER@$SERVER_HOST "mkdir -p $SERVER_DEPLOY_PATH"

          # Replace placeholders in HTML files before deployment
          sed -i "s/YOUR-RECAPTCHA-SITE-KEY/$RECAPTCHA_SITE_KEY/g" web/index.html
          sed -i "s/GTM-XXXXXXX/$GTM_CONTAINER_ID/g" web/index.html web/privacy.html

          # Deploy website files from web folder
          rsync -avz --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'node_modules' \
            --exclude '*.md' \
            --exclude '.gitignore' \
            --exclude '.DS_Store' \
            --exclude 'config.php' \
            --exclude 'vendor' \
            --exclude '.env' \
            web/ \
            $SERVER_USER@$SERVER_HOST:$SERVER_DEPLOY_PATH/

          # Create config.php from example with secrets
          ssh $SERVER_USER@$SERVER_HOST "cd $SERVER_DEPLOY_PATH && cp config.example.php config.php"
          
          # Create .env file with secrets on server
          ssh $SERVER_USER@$SERVER_HOST "echo 'CONTACT_EMAIL_TO=${CONTACT_EMAIL_TO}' > $SERVER_DEPLOY_PATH/.env && \
            echo 'GMAIL_USERNAME=${GMAIL_USERNAME}' >> $SERVER_DEPLOY_PATH/.env && \
            echo 'GMAIL_APP_PASSWORD=${GMAIL_APP_PASSWORD}' >> $SERVER_DEPLOY_PATH/.env && \
            echo 'RECAPTCHA_SITE_KEY=${RECAPTCHA_SITE_KEY}' >> $SERVER_DEPLOY_PATH/.env && \
            echo 'RECAPTCHA_SECRET_KEY=${RECAPTCHA_SECRET_KEY}' >> $SERVER_DEPLOY_PATH/.env"

          # Run composer install on server
          ssh $SERVER_USER@$SERVER_HOST "cd $SERVER_DEPLOY_PATH && composer install --no-dev --optimize-autoloader"

          # Set proper permissions
          ssh $SERVER_USER@$SERVER_HOST "find $SERVER_DEPLOY_PATH -type f -exec chmod 644 {} \;"
          ssh $SERVER_USER@$SERVER_HOST "find $SERVER_DEPLOY_PATH -type d -exec chmod 755 {} \;"
          ssh $SERVER_USER@$SERVER_HOST "chmod 600 $SERVER_DEPLOY_PATH/config.php $SERVER_DEPLOY_PATH/.env"
          ssh $SERVER_USER@$SERVER_HOST "chmod 755 $SERVER_DEPLOY_PATH/send-email-smtp.php"